#include <grpcpp/grpcpp.h>
#include "proto/hello.grpc.pb.h"
#include "proto/hello.pb.h"
#include <iostream>
#include <fstream>
#include <string.h>
#include <stdio.h>

using namespace std;

string ReadFile(const string& filepath) {
    ifstream file(filepath);
    if (!file.is_open()) {
        throw runtime_error("Could not open file");
    }
    stringstream buffer;
    buffer << file.rdbuf();
    return buffer.str();
}

void WriteFile(const string& filepath, const string& content) {
    ofstream file(filepath);
    if (!file.is_open()) {
        throw runtime_error("Could not open file");
    }
    file << content;
}

int main(int argc, char** argv) {
    // Create a Stub object
    auto channel = grpc::CreateChannel("localhost:9999", grpc::InsecureChannelCredentials());
    unique_ptr<RegisterUser::Stub> registerStub(RegisterUser::NewStub(channel));
    unique_ptr<LoginUser::Stub> loginStub(LoginUser::NewStub(channel));

    /*    
    // Register a new user
    User request;
    request.set_username("username");
    request.set_password("password");

    ResultRegister response;
    grpc::Status status = registerStub->registerUser(&context, request, &response);

    if (status.ok()) {
        cout << "Registration successful" << endl;
    } else {
        cerr << "Registration failed: " << status.error_message() << endl;
        return 1;
    }
    */

    // Login to an existing user
    User loginRequest;
    loginRequest.set_username("username");
    loginRequest.set_password("password");

    ResultLogin loginResponse;
    status = loginStub->loginUser(&context, loginRequest, &loginResponse);

    if (status.ok()) {
        cout << "Login successful" << endl;
    } else {
        cerr << "Login failed: " << status.error_message() << endl;
        return 1;
    }

    /*
    // Call the computeSum function
    Point3 request;
    request.set_x(1.0);
    request.set_y(2.0);
    request.set_z(3.0);

    Numeric response;

    auto channel = grpc::CreateChannel("localhost:9999", grpc::InsecureChannelCredentials());
    unique_ptr<ProcessingServices::Stub> stub(ProcessingServices::NewStub(channel));

    grpc::Status status = stub->computeSum(&context, request, &response);

    if (status.ok())
    {
        cout << "Result: " << response.value() << endl;
    }
    else
    {
        cerr << "RPC failed: " << status.error_message() << endl;
        return 1;
    }
    */

    return 0;
}